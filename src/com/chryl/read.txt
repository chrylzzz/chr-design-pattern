#
#
1.简单工厂模式:适用于多个产品的对象的生产,工程生产各类对象.本质上是一类产品.在一堆中生产某个需要的
#
2.策略模式:针对算法,就是封装算法,虽然算法实现不同,但是把调用方式使用相同的
#
3.单一职责原则:每个类的职责尽量单一,例如mybatis的单一职责原则
#
4.开放-封闭原则:增加>修改(能增不改),原来的能动则不动
#
5.依赖倒转原则:依赖抽象/接口,抽象/接口编程(解耦)
#
6.装饰模式:动态的给一个对象添加其他额外的职责,比生成子类更灵活***********
#
7.代理模式:代理这个对象的访问
#
8.工厂方法模式:定义一个创建的对象的接口,让子类决定去实例化哪个类,使得一工厂类的实例化延伸到其子类
#
9.原型模式:指定创建对象的种类,并且拷贝创建原型的新对象
#
10.
#
11.
#
12.
#
13.
#


##################################
中文	英文
0.简单工厂模式 Simple Factory Pattern
1.工厂方法模式	Factory Method Pattern
2.抽象工厂模式	Abstract Factory Pattern
3.建造者模式	Builder Pattern
4.原型模式	Prototype Pattern
5.单例模式	Singleton Pattern
6.适配器模式	Adapter Pattern
7.桥梁模式/桥接模式	Bridge Pattern
8.组合模式	Composite Pattern
9.装饰模式	Decorator Pattern
10.门面模式/外观模式	Facade Pattern
11.享元模式	Flyweight Pattern
12.代理模式	Proxy pattern
13.责任链模式	Chain of Responsibility Pattern
14.命令模式	Command Pattern
15.解释器模式	Interpreter Pattern
16.迭代器模式	Iterator Pattern
17.中介者模式	Mediator Pattern
18.备忘录模式	Memento Pattern
19.观察者模式	Observer Pattern
20.状态模式	State Pattern
21.策略模式	Strategy Pattern
22.模板方法模式	Template Method Pattern
23.访问者模式	Visitor Pattern

#####
#
        1、之前说过，学习设计模式除了努力之外还要靠缘分，所以如果有设计模式当时怎么看都不明白，可以暂且放下，之后说不定哪天你突然之间就明白了。（此话并非虚言，LZ很多次的顿悟常发生在上厕所、洗澡、回家路上等一些学习之外的时候。）

        2、对于已经在工作的人来说，可以常思考一下，有没有哪个设计模式可以改善现有的系统架构，但不要轻易付诸实践。

        3、学习设计模式之前，一定要先整明白UML类图，什么关联，依赖，聚合，组合等等都得搞明白儿的，否则学习起来也依然会很吃力。

        4、对于初学者，一定要在弄清楚标准的实现代码之后，写一个属于自己的例子，哪怕是比葫芦画瓢，然后仔细体会设计模式使用前后的差异，主要从扩展性和类（类包括客户端，而不仅仅指设计模式中的角色）的职责两个方面。

        5、一定要将设计模式的变化点搞清楚，这点非常重要，甚至重要程度高于设计模式的场景、实现方式以及类和对象之间的耦合关系，很多时候，设计模式的滥用就是因为变化点没搞清楚，以至于该变化的没变化，不该变化的经常变化，增加系统的负担。

        6、设计模式不是一次性学习完就可以扔掉不看的东西，而是要经常回过头来看看，说不定每一次你都有不一样的体会，而且一般情况下，这些体会会越来越深刻，越来越透彻。

        7、如果可能的话，多研究一些开源框架，去找找它们里面的设计模式。